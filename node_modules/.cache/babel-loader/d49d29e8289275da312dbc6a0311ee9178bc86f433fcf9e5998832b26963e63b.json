{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cards\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"history\"\n}, \"History\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"buttons\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onUpdate:modelValue\", \"onKeyup\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Button = _resolveComponent(\"Button\");\n  const _component_Transactions = _resolveComponent(\"Transactions\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.transactions, transaction => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: transaction.id,\n      class: _normalizeClass([\"card income-history card-balance\", transaction.is_expense ? 'border-red' : 'border-green'])\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(transaction.transaction_description), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Button, {\n      onClick: $event => $options.onDelete(transaction.id),\n      text: \"Delete\"\n    }, null, 8 /* PROPS */, [\"onClick\"]), !transaction.editing ? (_openBlock(), _createBlock(_component_Button, {\n      key: 0,\n      onClick: $event => $options.toggleEditTransaction(transaction),\n      text: \"Update\"\n    }, null, 8 /* PROPS */, [\"onClick\"])) : (_openBlock(), _createBlock(_component_Button, {\n      key: 1,\n      onClick: $event => $options.confirmEdit(transaction),\n      text: \"Confirm\",\n      color: \"green\"\n    }, null, 8 /* PROPS */, [\"onClick\"]))]), !transaction.editing ? (_openBlock(), _createElementBlock(\"h4\", _hoisted_4, _toDisplayString(transaction.is_expense ? '-' : '+') + \" $\" + _toDisplayString(transaction.amount), 1 /* TEXT */)) : _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n      key: 1,\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => transaction.updatedAmount = $event,\n      onKeyup: _withKeys($event => $options.confirmEdit(transaction), [\"enter\"])\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5)), [[_vModelText, transaction.updatedAmount]])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createVNode(_component_Transactions, {\n    onAddedTransaction: $options.fetchTransactions\n  }, null, 8 /* PROPS */, [\"onAddedTransaction\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_hoisted_2","_createElementBlock","_Fragment","_renderList","$data","transactions","transaction","key","id","_normalizeClass","is_expense","_toDisplayString","transaction_description","_hoisted_3","_createVNode","_component_Button","onClick","$event","$options","onDelete","text","editing","_createBlock","toggleEditTransaction","confirmEdit","color","_hoisted_4","amount","type","updatedAmount","onKeyup","_withKeys","_component_Transactions","onAddedTransaction","fetchTransactions"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/expense-tracker/src/frontend/components/History.vue"],"sourcesContent":["<template>\n    <div>\n      <div class=\"cards\">\n        <h4 class=\"history\">History</h4>\n  \n        <div\n          v-for=\"transaction in transactions\"\n          :key=\"transaction.id\"\n          class=\"card income-history card-balance\"\n          :class=\"transaction.is_expense ? 'border-red' : 'border-green'\"\n        >\n          <h4>{{ transaction.transaction_description }}</h4>\n          <div class=\"buttons\">\n            <Button @click=\"onDelete(transaction.id)\" text=\"Delete\"></Button>\n            <Button v-if = \"!transaction.editing\" @click=\"toggleEditTransaction(transaction)\" text=\"Update\"></Button>\n            <Button v-else @click=\"confirmEdit(transaction)\" text=\"Confirm\" color=\"green\"></Button>\n          </div>\n          <h4 v-if = \"!transaction.editing\" >\n            {{ transaction.is_expense ? '-' : '+' }} ${{ transaction.amount }}\n          </h4>\n          <input\n          v-else\n          type = \"text\"\n          v-model = \"transaction.updatedAmount\"\n          @keyup.enter = \"confirmEdit(transaction)\"\n          >\n        </div>\n      </div>\n    </div>\n    <Transactions @added-transaction = \"fetchTransactions\"></Transactions>\n  </template>\n  \n<script>\n  import Button from '../components/Button.vue';\n  import Transactions from '../components/Transactions.vue';\n  import axios from 'axios';\n  import { mapState, mapMutations } from 'vuex'; // Import Vuex mapState\n\n  \n  export default {\n    name: 'History',\n    components: {\n      Button,\n      Transactions,\n    },\n    computed: {\n    // Map the income and expenses from the Vuex store to component data\n        ...mapState(['income', 'expenses']),\n    },\n    data() {\n      return {\n        transactions: [],\n      };\n    },\n    created(){\n        this.fetchTransactions();\n            // Emit an event with optional data\n    },\n    methods: {\n\n        ...mapMutations(['updateIncome', 'updateExpenses']),\n\n        updateIncome(income) {\n            this.$store.commit('updateIncome', income)\n        },\n        updateExpenses(expenses) {\n            this.$store.commit('updateExpenses', expenses);\n        },\n\n\n      onDelete(id) {\n        axios\n          .delete(`http://localhost/expense-tracker/backend/api.php?id=${id}`)\n          .then((response) => {\n            console.log(response);\n            this.fetchTransactions();\n          })\n          .catch((error) => console.error(error));\n      },\n  \n      addTransaction(all_transactions) {\n        this.transactions = all_transactions;\n      },\n  \n      fetchTransactions() {\n\n        this.$store.commit('resetIncome');\n        this.$store.commit('resetExpenses');\n\n        axios\n          .get('http://localhost/expense-tracker/backend/api.php')\n          .then((response) => {\n            this.transactions = response.data;\n            \n            this.transactions.forEach((transaction) => {\n                if(transaction.is_expense){\n                    this.updateExpenses(transaction.amount)\n                }\n                else{\n                    this.updateIncome(transaction.amount)\n                }\n            })\n\n          })\n          .catch((error) => {\n            console.error(error);\n            console.log(error.response.data);\n          });\n\n      },\n\n      toggleEditTransaction(transaction){\n         transaction.editing = true\n      },\n\n      confirmEdit(transaction){\n         transaction.amount = Math.abs(transaction.updatedAmount)\n         transaction.editing = false\n\n         axios\n         .patch(`http://localhost/expense-tracker/backend/api.php?id=${transaction.id}`, {\n            amount: transaction.amount\n         })\n         .then((response) => {\n            console.log(response);\n            this.fetchTransactions();\n         })\n         .catch((err) => {\n            console.error(err)\n         })\n         transaction.updatedAmount = '';\n\n      }\n    }\n}\n</script>\n\n\n<style>\n\n    .income-history{\n        display: grid;\n        grid-template-columns: repeat(2, 150px) 100px;\n        align-items: center;\n    }\n\n    .buttons{\n        display: flex;\n        justify-content: space-evenly;\n        width: 100%;\n    }\n\n    .cards .history{\n        margin-bottom: 15px;\n        border-bottom: 1px solid var(--secondary-color);\n    }\n    .income-history h4 {\n        word-wrap: break-word;   \n    }\n    .border-green{\n        border-right: solid 5px var(--green-color);\n    }\n    .border-red{\n        border-right: solid 5px var(--red-color);\n    }\n</style>"],"mappings":";;EAEWA,KAAK,EAAC;AAAO;gCAChBC,mBAAA,CAAgC;EAA5BD,KAAK,EAAC;AAAS,GAAC,SAAO;;EASpBA,KAAK,EAAC;AAAS;;;;;;;;6DAX1BC,mBAAA,CA2BM,cA1BJA,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJC,UAAgC,G,kBAEhCC,mBAAA,CAqBMC,SAAA,QAAAC,WAAA,CApBkBC,KAAA,CAAAC,YAAY,EAA3BC,WAAW;yBADpBL,mBAAA,CAqBM;MAnBHM,GAAG,EAAED,WAAW,CAACE,EAAE;MACpBX,KAAK,EAAAY,eAAA,EAAC,kCAAkC,EAChCH,WAAW,CAACI,UAAU;QAE9BZ,mBAAA,CAAkD,YAAAa,gBAAA,CAA3CL,WAAW,CAACM,uBAAuB,kBAC1Cd,mBAAA,CAIM,OAJNe,UAIM,GAHJC,YAAA,CAAiEC,iBAAA;MAAxDC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACb,WAAW,CAACE,EAAE;MAAGY,IAAI,EAAC;2CAC9Bd,WAAW,CAACe,OAAO,I,cAApCC,YAAA,CAAyGP,iBAAA;;MAAlEC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAK,qBAAqB,CAACjB,WAAW;MAAGc,IAAI,EAAC;2DACvFE,YAAA,CAAuFP,iBAAA;;MAAvEC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAM,WAAW,CAAClB,WAAW;MAAGc,IAAI,EAAC,SAAS;MAACK,KAAK,EAAC;8CAE3DnB,WAAW,CAACe,OAAO,I,cAAhCpB,mBAAA,CAEK,MAAAyB,UAAA,EAAAf,gBAAA,CADAL,WAAW,CAACI,UAAU,gBAAe,IAAE,GAAAC,gBAAA,CAAGL,WAAW,CAACqB,MAAM,oB,+BAEjE1B,mBAAA,CAKC;;MAHD2B,IAAI,EAAG,MAAM;uCACFtB,WAAW,CAACuB,aAAa,GAAAZ,MAAA;MACnCa,OAAK,EAAAC,SAAA,CAAAd,MAAA,IAAUC,QAAA,CAAAM,WAAW,CAAClB,WAAW;0EAD5BA,WAAW,CAACuB,aAAa,E;sCAM1Cf,YAAA,CAAsEkB,uBAAA;IAAvDC,kBAAiB,EAAIf,QAAA,CAAAgB;EAAiB,gD"},"metadata":{},"sourceType":"module","externalDependencies":[]}