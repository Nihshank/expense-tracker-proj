{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"legend\", null, \"Add New Transaction\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"transaction_description\"\n}, \"Description:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"amount\"\n}, \"Amount:\", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"checks\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"is_expense\",\n  class: \"checkbox-label\"\n}, \"Expense\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"submit\",\n  value: \"Confirm Transaction\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    class: \"form\",\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.onSubmit && $options.onSubmit(...args), [\"prevent\"])),\n    method: \"POST\"\n  }, [_createElementVNode(\"fieldset\", null, [_hoisted_1, _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter description...\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.transaction_description = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.transaction_description]]), _hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter amount...\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.amount = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.amount]]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.is_expense = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.is_expense]]), _hoisted_5]), _hoisted_6])], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"names":["_createElementVNode","for","class","type","value","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","method","_hoisted_1","_hoisted_2","placeholder","$data","transaction_description","$event","_hoisted_3","amount","_hoisted_4","is_expense","_hoisted_5","_hoisted_6"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/expense-tracker/src/frontend/components/Transactions.vue"],"sourcesContent":["<template>\n    <form class=\"form\" @submit.prevent=\"onSubmit\" method=\"POST\">\n      <fieldset>\n        <legend>Add New Transaction</legend>\n  \n        <label for=\"transaction_description\">Description:</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter description...\"\n          v-model=\"transaction_description\"\n        />\n  \n        <label for=\"amount\">Amount:</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter amount...\"\n          v-model=\"amount\"\n        />\n  \n        <div class=\"checks\">\n          <input\n            type=\"checkbox\"\n            v-model=\"is_expense\"\n          >\n          <label for=\"is_expense\" class=\"checkbox-label\">Expense</label>\n        </div>\n  \n        <input\n          type=\"submit\"\n          value=\"Confirm Transaction\"\n        >\n      </fieldset>\n    </form>\n</template>\n  \n\n<script>\n  import axios from \"axios\";\n  \n  export default {\n    name: 'Transactions',\n    props: {\n      transactions: Array,\n    },\n    data() {\n      return {\n        transaction_description: '',\n        amount: null,\n        is_expense: false,\n      };\n    },\n    methods: {\n      fetchTransactions() {\n        // Fetch the initial data when the component is created\n        axios\n          .get('http://localhost/expense-tracker/backend/api.php')\n          .then((response) => {\n            // Emit the fetched data to the parent component\n            this.$emit('added-transaction', response.data);\n            console.log(response.data);\n          })\n          .catch((error) => {\n            console.error(error);\n            console.log(error.response.data);\n          });\n      },\n      onSubmit() {\n        // ... Your form submission logic ...\n\n        if(!this.transaction_description){\n            alert('Please enter a description');\n        }\n        else if(!this.amount){\n            alert('Please enter the amount')\n        }\n        else{\n\n            const data = {\n            transaction_description: this.transaction_description,\n            amount: parseFloat(this.amount),\n            is_expense: this.is_expense,\n        }\n\n        axios\n          .post('http://localhost/expense-tracker/backend/api.php', data)\n          .then((response) => {\n            // ... Your post request logic ...\n            alert('transaction added succesfully');\n            // After posting the data, fetch the updated data again\n            this.fetchTransactions();\n\n            this.transaction_description = \"\"\n            this.amount = ''\n            this.is_expense = false\n          })\n          .catch((error) => {\n            // ... Error handling for post request ...\n            console.error(error);\n          });\n        }\n\n      },\n    },\n  };\n</script>\n  \n  \n<style>\n\n    .form{\n        margin-top: 40px;\n        min-width: 100%;\n    }\n    fieldset{\n        padding: 20px;\n        border-radius: 5px;\n        border: 1px solid var(--secondary-color);\n    }\n\n    legend{\n        font-weight: 500;\n    }\n\n    label{\n        display: block;\n        margin-top: 10px;\n    }\n    label:first-of-type{\n        margin-top: 0;\n    }\n    input{\n        outline: none;\n        margin-bottom: 20px;\n        accent-color: var(--secondary-color);\n    }\n\n    input:last-of-type{\n        margin-bottom: 0px;\n        margin-top: 20px;\n    }\n    \n    input[type='text']{\n        border: none;\n        border-bottom: 1px solid var(--secondary-color);\n        padding: 5px 0px;\n        width: 100%;\n    }\n    input[type='submit']{\n        cursor: pointer;\n        width: 100%;\n        border: 1px solid var(--secondary-color);\n        background: var(--secondary-color);\n        color: white;\n        padding: 5px 0px;\n        font-weight: bold;\n        border-radius: 5px;\n    }\n    input[type='submit']:hover{\n        transform: scale(0.97);\n    }\n\n    input[type='checkbox'] + label{\n        display: inline-block; \n    }\n\n    input[type='checkbox']{\n        cursor: pointer;\n    }\n\n    .checks label{\n        margin-left: 5px;\n       \n    }\n\n</style>"],"mappings":";gCAGQA,mBAAA,CAAoC,gBAA5B,qBAAmB;gCAE3BA,mBAAA,CAAyD;EAAlDC,GAAG,EAAC;AAAyB,GAAC,cAAY;gCAOjDD,mBAAA,CAAmC;EAA5BC,GAAG,EAAC;AAAQ,GAAC,SAAO;;EAOtBC,KAAK,EAAC;AAAQ;gCAKjBF,mBAAA,CAA8D;EAAvDC,GAAG,EAAC,YAAY;EAACC,KAAK,EAAC;GAAiB,SAAO;gCAGxDF,mBAAA,CAGC;EAFCG,IAAI,EAAC,QAAQ;EACbC,KAAK,EAAC;;;;uBA5BZC,mBAAA,CA+BO;IA/BDH,KAAK,EAAC,MAAM;IAAEI,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAJ,QAAA,IAAAI,QAAA,CAAAJ,QAAA,IAAAG,IAAA,CAAQ;IAAEE,MAAM,EAAC;MACnDX,mBAAA,CA6BW,mBA5BTY,UAAoC,EAEpCC,UAAyD,E,gBACzDb,mBAAA,CAIE;IAHAG,IAAI,EAAC,MAAM;IACXW,WAAW,EAAC,sBAAsB;+DACzBC,KAAA,CAAAC,uBAAuB,GAAAC,MAAA;iDAAvBF,KAAA,CAAAC,uBAAuB,E,GAGlCE,UAAmC,E,gBACnClB,mBAAA,CAIE;IAHAG,IAAI,EAAC,MAAM;IACXW,WAAW,EAAC,iBAAiB;+DACpBC,KAAA,CAAAI,MAAM,GAAAF,MAAA;iDAANF,KAAA,CAAAI,MAAM,E,GAGjBnB,mBAAA,CAMM,OANNoB,UAMM,G,gBALJpB,mBAAA,CAGC;IAFCG,IAAI,EAAC,UAAU;+DACNY,KAAA,CAAAM,UAAU,GAAAJ,MAAA;qDAAVF,KAAA,CAAAM,UAAU,E,GAErBC,UAA8D,C,GAGhEC,UAGC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}